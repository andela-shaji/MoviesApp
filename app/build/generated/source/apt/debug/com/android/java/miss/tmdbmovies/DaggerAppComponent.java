// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.android.java.miss.tmdbmovies;

import android.content.Context;
import com.android.java.miss.tmdbmovies.fragments.TopRatedMoviesFragment;
import com.android.java.miss.tmdbmovies.fragments.TopRatedMoviesFragment_MembersInjector;
import com.android.java.miss.tmdbmovies.network.ApiManager;
import com.android.java.miss.tmdbmovies.network.NetworkModule;
import com.android.java.miss.tmdbmovies.network.NetworkModule_ProvideApiKeyFactory;
import com.android.java.miss.tmdbmovies.network.NetworkModule_ProvideApiManagerFactory;
import com.android.java.miss.tmdbmovies.network.NetworkModule_ProvideOkhttpClientFactory;
import com.android.java.miss.tmdbmovies.network.NetworkModule_ProvidePicassoFactory;
import com.android.java.miss.tmdbmovies.network.NetworkModule_ProvideRetrofitFactory;
import com.squareup.picasso.Picasso;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MembersInjectors;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private Provider<OkHttpClient> provideOkhttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<ApiManager> provideApiManagerProvider;

  private Provider<Context> provideApplicationContextProvider;

  private Provider<Picasso> providePicassoProvider;

  private MembersInjector<TopRatedMoviesFragment> topRatedMoviesFragmentMembersInjector;

  private Provider<String> provideApiKeyProvider;

  private DaggerAppComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideOkhttpClientProvider =
        NetworkModule_ProvideOkhttpClientFactory.create(builder.networkModule);

    this.provideRetrofitProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideRetrofitFactory.create(
                builder.networkModule, provideOkhttpClientProvider));

    this.provideApiManagerProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideApiManagerFactory.create(
                builder.networkModule, provideRetrofitProvider));

    this.provideApplicationContextProvider =
        AppModule_ProvideApplicationContextFactory.create(builder.appModule);

    this.providePicassoProvider =
        DoubleCheck.provider(
            NetworkModule_ProvidePicassoFactory.create(
                builder.networkModule, provideApplicationContextProvider));

    this.topRatedMoviesFragmentMembersInjector =
        TopRatedMoviesFragment_MembersInjector.create(
            provideApiManagerProvider, providePicassoProvider);

    this.provideApiKeyProvider =
        DoubleCheck.provider(NetworkModule_ProvideApiKeyFactory.create(builder.networkModule));
  }

  @Override
  public void inject(MoviesApp moviesApp) {
    MembersInjectors.<MoviesApp>noOp().injectMembers(moviesApp);
  }

  @Override
  public void inject(TopRatedMoviesFragment topRatedMoviesFragment) {
    topRatedMoviesFragmentMembersInjector.injectMembers(topRatedMoviesFragment);
  }

  @Override
  public MainActivityComponent plus(MainModule module) {
    return new MainActivityComponentImpl(module);
  }

  public static final class Builder {
    private NetworkModule networkModule;

    private AppModule appModule;

    private Builder() {}

    public AppComponent build() {
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      if (appModule == null) {
        throw new IllegalStateException(AppModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }
  }

  private final class MainActivityComponentImpl implements MainActivityComponent {
    private final MainModule mainModule;

    private Provider<DataExtractor> provideDataExtractorProvider;

    private MembersInjector<MainActivity> mainActivityMembersInjector;

    private MainActivityComponentImpl(MainModule mainModule) {
      this.mainModule = Preconditions.checkNotNull(mainModule);
      initialize();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {

      this.provideDataExtractorProvider = MainModule_ProvideDataExtractorFactory.create(mainModule);

      this.mainActivityMembersInjector =
          MainActivity_MembersInjector.create(
              DaggerAppComponent.this.provideApiKeyProvider, provideDataExtractorProvider);
    }

    @Override
    public void inject(MainActivity activity) {
      mainActivityMembersInjector.injectMembers(activity);
    }
  }
}
